# --------------------------------------------------------------------------- #
#                 Chickensoft C# Style — .editorconfig                        #
# --------------------------------------------------------------------------- #
#  Godot-friendly, K&R coding style with a bit of Dart-style flair thrown in. #
# --------------------------------------------------------------------------- #
#                                                                             #
#                                                                             #
#                            ╓╗_▄╗_╓▄_                                        #
#                          ▄▄╟▓▓▓▓▓▓▓▓                                        #
#                          ╙▓▓▓▀▀╠╠╦╦╓,_                                      #
#                           ,φ╠╠╠╠╠╠╠╠╠╠▒╥                                    #
#                          φ╠╠╠╠╠╠╠╠╠╠╠╠╠╠╦                                   #
#                         @╠╠╫▌╠╟▌╠╠╠╠╠╠╠╠╠                                   #
#                         ╠╠╠▄▄▄▒╠╠╠╠╠╠╠╠╠╠b                                  #
#                         ╠╠╨███▌╠╠╠╠╠╠╠▒╠╠▒_  ç╓                             #
#                         ╠╠╠╠▒▒╠╠╠╠╠╠╠╠▒Å▄╠╬▒φ╩ε                             #
#                         ╚╠╠╠╠╠╠╠╠╠╠╠▒█▒╫█Å╠╠╩                               #
#                          ╠╠╠╠╠╠╠╠╠╠╠╠╠╟╫▒╠╠╩                                #
#                           ╙╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╜                                 #
#                             ╙╚╠╠╠╠╠╠╠╠╩╙                                    #
#                                 ╒     µ                                     #
#                                 ▌     ▓                                     #
#                               ^▀▀    "▀ª                                    #
#                                                                             #
#                                                                             #
# --------------------------------------------------------------------------- #
#
# Based on:
#  - https://github.com/RehanSaeed/EditorConfig/blob/main/.editorconfig
#  - https://gist.github.com/FaronBracy/155d8d7ad98b4ceeb526b9f47543db1b
#  - various other gists floating around :)
#
# Have a problem? Encounter an issue?
# Come visit our Discord and let us know! https://discord.gg/MjA6HUzzAE
#
# Based on https://github.com/RehanSaeed/EditorConfig/blob/main/.editorconfig
# and https://gist.github.com/FaronBracy/155d8d7ad98b4ceeb526b9f47543db1b

# This file is the top-most EditorConfig file
root = true

# All Files
[*]
charset = utf-8
indent_style = space
indent_size = 2
insert_final_newline = true
trim_trailing_whitespace = true

##########################################
# File Extension Settings
##########################################

# GDScript Files
[*.gd]
indent_style = tab
indent_size = 2

# Visual Studio Solution Files
[*.sln]
indent_style = tab

# Visual Studio XML Project Files
[*.{csproj,vbproj,vcxproj.filters,proj,projitems,shproj}]
indent_size = 2

# XML Configuration Files
[*.{xml,config,props,targets,nuspec,resx,ruleset,vsixmanifest,vsct}]
indent_size = 2

# JSON Files
[*.{json,json5,webmanifest}]
indent_size = 2

# YAML Files
[*.{yml,yaml}]
indent_size = 2

# Markdown Files
[*.{md,mdx}]
trim_trailing_whitespace = false

# Web Files
[*.{htm,html,js,jsm,ts,tsx,cjs,cts,ctsx,mjs,mts,mtsx,css,sass,scss,less,pcss,svg,vue}]
indent_size = 2

# Batch Files
[*.{cmd,bat}]
end_of_line = crlf

# Bash Files
[*.sh]
end_of_line = lf

# Makefiles
[Makefile]
indent_style = tab

[*{_Generated.cs,.g.cs,.generated.cs}]
# Ignore a lack of documentation for generated code. Doesn't apply to builds,
# just to viewing generation output.
dotnet_diagnostic.CS1591.severity = none

##########################################
# Default .NET Code Style Severities
##########################################

[*.cs]
# Default Severity for all .NET Code Style rules below
dotnet_analyzer_diagnostic.severity = warning

##########################################
# Language Rules
##########################################

# .NET Style Rules

# "this." and "Me." qualifiers
dotnet_style_qualification_for_field = false
dotnet_style_qualification_for_property = false
dotnet_style_qualification_for_method = false
dotnet_style_qualification_for_event = false

# Language keywords instead of framework type names for type references
dotnet_style_predefined_type_for_locals_parameters_members = true:warning
dotnet_style_predefined_type_for_member_access = true:warning

# Modifier preferences
dotnet_style_require_accessibility_modifiers = for_non_interface_members:warning
csharp_preferred_modifier_order = public,private,protected,internal,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async:warning
visual_basic_preferred_modifier_order = Partial,Default,Private,Protected,Public,Friend,NotOverridable,Overridable,MustOverride,Overloads,Overrides,MustInherit,NotInheritable,Static,Shared,Shadows,ReadOnly,WriteOnly,Dim,Const,WithEvents,Widening,Narrowing,Custom,Async:warning
dotnet_style_readonly_field = true:warning

# Parentheses preferences
dotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity:warning
dotnet_style_parentheses_in_relational_binary_operators = always_for_clarity:warning
dotnet_style_parentheses_in_other_binary_operators = always_for_clarity:warning
dotnet_style_parentheses_in_other_operators = never_if_unnecessary:warning

# Expression-level preferences
dotnet_style_object_initializer = true:warning
dotnet_style_collection_initializer = true:warning
dotnet_style_explicit_tuple_names = true:warning
dotnet_style_prefer_inferred_tuple_names = true:warning
dotnet_style_prefer_inferred_anonymous_type_member_names = true:warning
dotnet_style_prefer_auto_properties = true:warning
dotnet_style_prefer_conditional_expression_over_assignment = true:suggestion
dotnet_diagnostic.IDE0045.severity = suggestion
dotnet_style_prefer_conditional_expression_over_return = true:suggestion
dotnet_diagnostic.IDE0046.severity = suggestion
dotnet_style_prefer_compound_assignment = true:warning
dotnet_style_prefer_simplified_interpolation = true:warning
dotnet_style_prefer_simplified_boolean_expressions = true:warning

# Null-checking preferences
dotnet_style_coalesce_expression = true:warning
dotnet_style_null_propagation = true:warning
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:warning

# File header preferences
# Keep operators at end of line when wrapping.
dotnet_style_operator_placement_when_wrapping = end_of_line
csharp_style_prefer_null_check_over_type_check = true:warning

# Code block preferences
csharp_prefer_braces = true:warning
csharp_prefer_simple_using_statement = true:suggestion
dotnet_diagnostic.IDE0063.severity = suggestion

# C# Style Rules

# 'var' preferences
csharp_style_var_for_built_in_types = true:warning
csharp_style_var_when_type_is_apparent = true:warning
csharp_style_var_elsewhere = true:warning
# Expression-bodied members
csharp_style_expression_bodied_methods = true:warning
csharp_style_expression_bodied_constructors = false:warning
csharp_style_expression_bodied_operators = true:warning
csharp_style_expression_bodied_properties = true:warning
csharp_style_expression_bodied_indexers = true:warning
csharp_style_expression_bodied_accessors = true:warning
csharp_style_expression_bodied_lambdas = true:warning
csharp_style_expression_bodied_local_functions = true:warning
# Pattern matching preferences
csharp_style_pattern_matching_over_is_with_cast_check = true:warning
csharp_style_pattern_matching_over_as_with_null_check = true:warning
csharp_style_prefer_switch_expression = true:warning
csharp_style_prefer_pattern_matching = true:warning
csharp_style_prefer_not_pattern = true:warning
# Expression-level preferences
csharp_style_inlined_variable_declaration = true:warning
csharp_prefer_simple_default_expression = true:warning
csharp_style_pattern_local_over_anonymous_function = true:warning
csharp_style_deconstructed_variable_declaration = true:warning
csharp_style_prefer_index_operator = true:warning
csharp_style_prefer_range_operator = true:warning
csharp_style_implicit_object_creation_when_type_is_apparent = true:warning
# "Null" checking preferences
csharp_style_throw_expression = true:warning
csharp_style_conditional_delegate_call = true:warning
# 'using' directive preferences
csharp_using_directive_placement = inside_namespace:warning
# Modifier preferences
# Don't suggest making public methods static. Very annoying.
csharp_prefer_static_local_function = false
# Only suggest making private methods static (if they don't use instance data).
dotnet_code_quality.CA1822.api_surface = private

##########################################
# Unnecessary Code Rules
##########################################

# .NET Unnecessary code rules

dotnet_code_quality_unused_parameters = non_public:suggestion
dotnet_remove_unnecessary_suppression_exclusions = none
dotnet_diagnostic.IDE0079.severity = warning

# C# Unnecessary code rules

# Chickensoft Unused Code Additions
#
# Unfortunately for VSCode users, disabling these rules prevents you from
# detecting unused code. Enabling them will trigger the roslyn analyzers'
# automatic code fixes to remove unused code, which is very annoying when
# you're actively coding or using reflection.
#
# I have not found a way to disable automatic fixes while keeping
# warnings/suggestions/etc in the editor. If you find a way, please file an
# issue or open a PR.

# Don't remove method parameters that are unused.
dotnet_diagnostic.IDE0060.severity = none
dotnet_diagnostic.RCS1163.severity = none

# Don't remove methods that are unused.
dotnet_diagnostic.IDE0051.severity = none
dotnet_diagnostic.RCS1213.severity = none

# Use discard variable for unused expression values.
csharp_style_unused_value_expression_statement_preference = discard_variable

# .NET formatting rules

# Organize using directives
dotnet_sort_system_directives_first = true
dotnet_separate_import_directive_groups = false

# Dotnet namespace options
#
# We don't care about namespaces matching folder structure. Games and apps
# are complicated and you are free to organize them however you like. Change
# this if you want to enforce it.
dotnet_style_namespace_match_folder = false
dotnet_diagnostic.IDE0130.severity = none

# C# formatting rules

# Newline options
csharp_new_line_before_open_brace = none
csharp_new_line_before_else = true
csharp_new_line_before_catch = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_between_query_expression_clauses = true

# Indentation options
csharp_indent_switch_labels = true
csharp_indent_case_contents = true
csharp_indent_case_contents_when_block = true
csharp_indent_labels = no_change
csharp_indent_block_contents = true
csharp_indent_braces = false

# Spacing options
csharp_space_after_cast = false
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_between_parentheses = false
csharp_space_before_colon_in_inheritance_clause = true
csharp_space_after_colon_in_inheritance_clause = true
csharp_space_around_binary_operators = before_and_after
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_declaration_name_and_open_parenthesis = false
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_method_call_empty_parameter_list_parentheses = false
csharp_space_between_method_call_name_and_opening_parenthesis = false
csharp_space_after_comma = true
csharp_space_before_comma = false
csharp_space_after_dot = false
csharp_space_before_dot = false
csharp_space_after_semicolon_in_for_statement = true
csharp_space_before_semicolon_in_for_statement = false
csharp_space_around_declaration_statements = false
csharp_space_before_open_square_brackets = false
csharp_space_between_empty_square_brackets = false
csharp_space_between_square_brackets = false

# Wrap options
csharp_preserve_single_line_statements = false
csharp_preserve_single_line_blocks = true

# Namespace options
csharp_style_namespace_declarations = file_scoped:warning

##########################################
# .NET Naming Rules
##########################################

##########################################
# Chickensoft Naming Conventions & Styles
# These deviate heavily from Microsoft's Offical Naming Conventions.
##########################################

# Allow underscores in names.
dotnet_diagnostic.CA1707.severity = none

# Styles
dotnet_naming_style.pascal_case_style.capitalization = pascal_case

dotnet_naming_style.upper_case_style.capitalization = all_upper
dotnet_naming_style.upper_case_style.word_separator = _

dotnet_naming_style.camel_case_style.capitalization = camel_case

dotnet_naming_style.camel_case_underscore_style.required_prefix = _
dotnet_naming_style.camel_case_underscore_style.capitalization = camel_case

# Use uppercase for all constant fields.
dotnet_naming_rule.constants_uppercase.severity = suggestion
dotnet_naming_rule.constants_uppercase.symbols = constant_fields
dotnet_naming_rule.constants_uppercase.style = upper_case_style
dotnet_naming_symbols.constant_fields.applicable_kinds = field
dotnet_naming_symbols.constant_fields.applicable_accessibilities = *
dotnet_naming_symbols.constant_fields.required_modifiers = const

# Non-public fields should be _camelCase
dotnet_naming_rule.non_public_fields_under_camel.severity = suggestion
dotnet_naming_rule.non_public_fields_under_camel.symbols = non_public_fields
dotnet_naming_rule.non_public_fields_under_camel.style = camel_case_underscore_style
dotnet_naming_symbols.non_public_fields.applicable_kinds = field
dotnet_naming_symbols.non_public_fields.required_modifiers =
dotnet_naming_symbols.non_public_fields.applicable_accessibilities = private,private_protected,internal,protected,protected_internal

# Public fields should be PascalCase
dotnet_naming_rule.public_fields_pascal.severity = suggestion
dotnet_naming_rule.public_fields_pascal.symbols = public_fields
dotnet_naming_rule.public_fields_pascal.style = pascal_case_style
dotnet_naming_symbols.public_fields.applicable_kinds = field
dotnet_naming_symbols.public_fields.required_modifiers =
dotnet_naming_symbols.public_fields.applicable_accessibilities = public

# Async methods should have "Async" suffix.
# Disabled because it makes tests too verbose.
# dotnet_naming_style.end_in_async.required_suffix = Async
# dotnet_naming_style.end_in_async.capitalization = pascal_case
# dotnet_naming_rule.methods_end_in_async.symbols = methods_async
# dotnet_naming_rule.methods_end_in_async.style = end_in_async
# dotnet_naming_rule.methods_end_in_async.severity = warning
# dotnet_naming_symbols.methods_async.applicable_kinds = method
# dotnet_naming_symbols.methods_async.required_modifiers = async
# dotnet_naming_symbols.methods_async.applicable_accessibilities = *

##########################################
# Other Naming Rules
##########################################

# All of the following must be PascalCase:
dotnet_naming_symbols.element_group.applicable_kinds = namespace, class, enum, struct, delegate, event, method, property
dotnet_naming_rule.element_rule.symbols = element_group
dotnet_naming_rule.element_rule.style = pascal_case_style
dotnet_naming_rule.element_rule.severity = warning

# Interfaces use PascalCase and are prefixed with uppercase 'I'
# https://docs.microsoft.com/dotnet/standard/design-guidelines/names-of-classes-structs-and-interfaces
dotnet_naming_style.prefix_interface_with_i_style.capitalization = pascal_case
dotnet_naming_style.prefix_interface_with_i_style.required_prefix = I
dotnet_naming_symbols.interface_group.applicable_kinds = interface
dotnet_naming_rule.interface_rule.symbols = interface_group
dotnet_naming_rule.interface_rule.style = prefix_interface_with_i_style
dotnet_naming_rule.interface_rule.severity = warning

# Generics Type Parameters use PascalCase and are prefixed with uppercase 'T'
# https://docs.microsoft.com/dotnet/standard/design-guidelines/names-of-classes-structs-and-interfaces
dotnet_naming_style.prefix_type_parameters_with_t_style.capitalization = pascal_case
dotnet_naming_style.prefix_type_parameters_with_t_style.required_prefix = T
dotnet_naming_symbols.type_parameter_group.applicable_kinds = type_parameter
dotnet_naming_rule.type_parameter_rule.symbols = type_parameter_group
dotnet_naming_rule.type_parameter_rule.style = prefix_type_parameters_with_t_style
dotnet_naming_rule.type_parameter_rule.severity = warning

# Function parameters use camelCase
# https://docs.microsoft.com/dotnet/standard/design-guidelines/naming-parameters
dotnet_naming_symbols.parameters_group.applicable_kinds = parameter
dotnet_naming_rule.parameters_rule.symbols = parameters_group
dotnet_naming_rule.parameters_rule.style = camel_case_style
dotnet_naming_rule.parameters_rule.severity = warning

# Anything not specified uses camel case.
dotnet_naming_rule.unspecified_naming.severity = warning
dotnet_naming_rule.unspecified_naming.symbols = unspecified
dotnet_naming_rule.unspecified_naming.style = camel_case_style
dotnet_naming_symbols.unspecified.applicable_kinds = *
dotnet_naming_symbols.unspecified.applicable_accessibilities = *

##########################################
# Chickensoft Rule Overrides
##########################################

# Don't require culture info for ToString()
dotnet_diagnostic.CA1304.severity = none
# Don't require a string comparison for comparing strings.
dotnet_diagnostic.CA1310.severity = none
# Don't require a string format specifier.
dotnet_diagnostic.CA1305.severity = none
# Allow protected fields.
dotnet_diagnostic.CA1051.severity = none
# Don't warn about checking values that are supposedly never null. Sometimes
# they are actually null.
dotnet_diagnostic.CS8073.severity = none
# Don't remove seemingly "unnecessary" assignments, as they often have
# intended side-effects.
dotnet_diagnostic.IDE0059.severity = none
# Switch/case should always have a default clause. Tell that to Roslynator.
dotnet_diagnostic.RCS1070.severity = none
# Tell roslynator not to eat unused parameters.
dotnet_diagnostic.RCS1163.severity = suggestion
# Tell dotnet not to remove unused parameters.
dotnet_diagnostic.IDE0060.severity = suggestion
# Tell roslynator not to remove `partial` modifiers.
dotnet_diagnostic.RCS1043.severity = none
# Tell roslynator not to make classes static so aggressively.
dotnet_diagnostic.RCS1102.severity = none
# Roslynator wants to make properties readonly all the time, so stop it.
# The developer knows best when it comes to contract definitions with Godot.
dotnet_diagnostic.RCS1170.severity = none
# Allow expression values to go unused, even without discard variable.
# Otherwise, using Moq would be way too verbose.
dotnet_diagnostic.IDE0058.severity = none
# Enums don't need to declare explicit values. Everyone knows they start at 0.
dotnet_diagnostic.RCS1161.severity = none
# Allow unconstrained type parameter to be checked for null.
dotnet_diagnostic.RCS1165.severity = none
# Allow keyword-based names so that parameter names like `@event` can be used.
dotnet_diagnostic.CA1716.severity = none
# Let me put comments where I like
dotnet_diagnostic.RCS1181.severity = none
# Allow me to use the word Collection if I want.
dotnet_diagnostic.CA1711.severity = none
# Not disposing of objects in a test is normal within Godot because of scene tree stuff.
dotnet_diagnostic.CA1001.severity = none
# No primary constructors — not supported well by tooling.
dotnet_diagnostic.IDE0290.severity = none
# Let me comment where I like
dotnet_diagnostic.RCS1181.severity = none
# Let me write dumb if statements for readability.
dotnet_diagnostic.IDE0046.severity = none
# Don't make me use expression bodies for methods
dotnet_diagnostic.IDE0022.severity = none
# DO make me populate a *switch expression*
dotnet_diagnostic.IDE0072.severity = warning
# Don't make me populate a *switch statement*
dotnet_diagnostic.IDE0010.severity = none
# Make local functions static
dotnet_diagnostic.IDE0062.severity = warning
# Don't make me use properties if I don't want to.
dotnet_diagnostic.IDE0032.severity = none
# Don't make me populate a switch expression redundantly
dotnet_diagnostic.IDE0072.severity = none
# Leave me alone about primary constructors
dotnet_diagnostic.IDE0290.severity = none
